# azure-pipelines.yml
# ------------------------------------------------------------------
# CI/CD Pipeline for DevOps-task sample application
# Branching strategy: 'develop' for testing/integration, 'main' for production.
# Secrets (e.g., ACR and Azure subscription details) are managed via
# variable groups/service connections.
# ------------------------------------------------------------------

trigger:
  branches:
    include:
      - main
      - develop

# pr:
#   branches:
#     include:
#       - main
#       - develop

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'edac4454-1e02-4b6c-9c3d-5c7100c11af3'
  imageRepository: 'devopstaskcontainerrepository'
  containerRegistry: 'devopsTaskContainerRegistry.azurecr.io'
  dockerfilePath: 'Devops-task/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'devopstaskcontainerregistry5460273c-auth'

  # Agent VM image name
  vmImageName: 'self-hosted-agent'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
# Stage 1: Build and Test
- stage: AutomatedTesting
  displayName: "Build & Test: Unit Tests, Infrastructure Validation, Security Scanning"
  jobs:
  - job: BuildAndTestJob
    displayName: "Run Tests and Scans"
    pool: 'self-hosted-agent'
    steps:
    - checkout: self
    # - script: |
    #      echo "Running unit tests..."
    #      # Replace with your actual test command (e.g., npm test, dotnet test, etc.)
    #      ./run_tests.sh
    #   displayName: "Run Unit Tests"
    - script: |
         echo "Validating infrastructure..."
         terraform init
         terraform validate || echo "No infrastructure code to validate."
      displayName: "Infrastructure Validation"

    # - script: |
        #  echo "Performing security scan on container image..."
        #  # Example: using Trivy for container scanning; adjust image name as needed.
        #  trivy image --exit-code 0 --severity HIGH,CRITICAL devopstask:latest
      # displayName: "Security Scanning"
    # - task: PublishTestResults@2
    #   inputs:
    #      testResultsFiles: '**/test-results.xml'
    #      testRunTitle: 'Unit Tests'
    #   displayName: "Publish Test Results"

# Stage 2: Containerization
- stage: Containerize
  displayName: "Containerize Application"
  dependsOn: AutomatedTesting
  jobs:
  - job: BuildImage
    displayName: "Build and Push Docker Image"
    pool: 'self-hosted-agent'
    steps:
    - checkout: self
    - script: |
        if not exist "Devops-task" (
          echo "Cloning inner repository..."
          git clone https://github.com/NarasimhaNayan/Devops-task.git Devops-task
        displayName: "Clone Inner Repository"
        )
    - task: Docker@2
      displayName: "Build and Push Docker Image"
      inputs:
        containerRegistry: 'devopsTaskContainerRegistry'   # Service connection to your ACR (managed securely)
        repository: 'devopsTaskContainerRepository'
        command: 'buildAndPush'
        Dockerfile: 'Devops-task/Dockerfile'
        tags: |
          $(Build.BuildId)
    - script: |
         echo "Docker image built and pushed successfully."
      displayName: "Confirm Build"

# # Stage 3: Deployment to AKS
# - stage: Deploy
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Containerize

  jobs:
  - deployment: Deploy
    displayName: Deploy image to AKS
    pool: $(vmImageName)
    environment: 'NarasimhaNayaninfrastructureascode-2986.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: |
              if not exist "Devops-task" (
                echo "Cloning inner repository..."
                git clone https://github.com/NarasimhaNayan/Devops-task.git Devops-task
              displayName: "Clone Inner Repository"
              )
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                manifests\deployment.yml
                manifests\service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):latest

# # Stage 4: Automated Rollback (if deployment fails)
# - stage: Rollback
#   displayName: "Rollback Deployment on Failure"
#   dependsOn: Deploy
#   condition: failed()  # This stage runs only if the Deploy stage fails
#   jobs:
#   - job: RollbackJob
#     displayName: "Rollback Deployment to Previous Version"
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - script: |
#          echo "Initiating rollback..."
#          # Use kubectl rollout undo to rollback the deployment.
#          kubectl rollout undo deployment/devopstask-deployment
#       displayName: "Rollback Command"
