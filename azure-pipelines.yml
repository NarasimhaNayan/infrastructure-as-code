# azure-pipelines.yml
# ------------------------------------------------------------------
# CI/CD Pipeline for DevOps-task sample application
# Branching strategy: 'develop' for testing/integration, 'main' for production.
# Secrets (e.g., ACR and Azure subscription details) are managed via
# variable groups/service connections.
# ------------------------------------------------------------------

trigger:
  branches:
    include:
      - main
      - develop

# pr:
#   branches:
#     include:
#       - main
#       - develop
  
variables:
  # pulls the imagePullSecret and DATABASE-URL from key vault 
  group: devops-task-variable-group

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'edac4454-1e02-4b6c-9c3d-5c7100c11af3'
  imageRepository: 'devopstaskcontainerrepository'
  containerRegistry: 'devopsTaskContainerRegistry.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'devopstaskcontainerregistry5460273c-auth'

  # Agent VM image name
  vmImageName: 'self-hosted-agent'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
# Stage 1: Build and Test
- stage: AutomatedTesting
  displayName: "Build & Test: Unit Tests, Infrastructure Validation, Security Scanning"
  jobs:
  - job: BuildAndTestJob
    displayName: "Run Tests and Scans"
    pool: 'self-hosted-agent'
    steps:
    - checkout: self
    - script: |
         echo "Checking for Go installation..."
         where go
         IF %ERRORLEVEL% NEQ 0 (
            echo "Go not found. Installing Go via Chocolatey..."
            choco install golang -y
         ) ELSE (
            echo "Go is already installed."
         )
         echo "Go version:"
         go version
         echo "Running tests..."
         go test ./...
      displayName: "Install Go and Run Tests"

    - script: |
         echo "Validating infrastructure..."
         terraform init
         terraform validate || echo "No infrastructure code to validate."
      displayName: "Infrastructure Validation"

    # - task: Bash@3
    #   displayName: "Run Shell Script"
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo "Running shell script..."
    #       ./my-script.sh

    # - script: |
    #     echo "Installing Trivy..."
    #     choco install trivy -y
    #     chmod +x security-scan.sh
    #     ./security-scan.sh $(containerRegistry)/$(imageRepository):$(Build.BuildId)
    #   displayName: "Security Scans"

# Stage 2: Containerization
- stage: Containerize
  displayName: "Containerize Application"
  dependsOn: AutomatedTesting
  jobs:
  - job: BuildImage
    displayName: "Build and Push Docker Image"
    pool: $(vmImageName)
    steps:
    - checkout: self
    - task: Docker@2
      displayName: "Build and Push Docker Image"
      inputs:
        containerRegistry: 'devopsTaskContainerRegistry'   # Service connection to your ACR (managed securely)
        repository: $(imageRepository)
        command: 'buildAndPush'
        Dockerfile: $(dockerfilePath)
        tags: |
          $(Build.BuildId)
    - script: |
         echo "Docker image built and pushed successfully."
      displayName: "Confirm Build"
    - task: Bash@3
      displayName: "Install Trivy and Run Security Scan"
      inputs:
        targetType: 'inline'
        script: |
          echo "Installing Trivy..."
          choco install trivy -y
          chmod +x security-scan.sh
          ./security-scan.sh $(containerRegistry)/$(imageRepository):$(Build.BuildId)

# # Stage 3: Deployment to AKS
# - stage: Deploy
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Containerize

  jobs:
  - deployment: Deploy
    displayName: Deploy image to AKS
    pool: $(vmImageName)
    environment: 'NarasimhaNayaninfrastructureascode-2986.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            env:
              DATABASE_URL: $(DATABASE_URL)
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                manifests\deployment.yml
                manifests\service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(Build.BuildId)

# Stage 4: Automated Rollback (if deployment fails)
- stage: Rollback
  displayName: "Rollback Deployment on Failure"
  dependsOn: Deploy
  condition: failed() 
  jobs:
  - job: RollbackJob
    displayName: "Rollback Deployment to Previous Version"
    pool: $(vmImageName)
    steps:
    - task: Bash@3
      displayName: "Rollback Command"
      inputs:
        targetType: 'inline'
        script: |
          echo "Fetching AKS credentials..."
          az aks get-credentials --resource-group devops-task-resourceGroup --name devops-task-aksCluster --overwrite-existing
          echo "Checking rollout history..."
          kubectl rollout history deployment/devopstask-deployment --namespace default
          echo "Initiating rollback..."
          kubectl rollout undo deployment/devopstask-deployment --namespace default || echo "No previous revision found; rollback not possible."

